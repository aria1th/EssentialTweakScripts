client = getMinecraftClient();
player = client.getPlayer();
world = client.getWorld();

accurateBlockPlacementEnabled =true;
replace = true;
doSleep = true;
sleepAmount = 100;

Horizontal = ["east","west","north","south"];
AllDirections = ["east","west","north","south","up","down"];
TorchDirections = ["east","west","north","south","down"];
mapBlockRef = {
	1 : "white_concrete",
	2 : "sticky_piston",
	3 : "note_block",
	4 : "powered_rail",
	5 : "repeater",
	6 : "white_stained_glass",
	7 : "iron_trapdoor",
	8 : "air"
};
mapPropertyRef = {
	1 : false,
	2 : false,
	3 : false,
	4 : false,
	5 : false,
	6 : false,
	7 : true,
	8 : false
};
fun reverseList(iter){
//pls sensei where's reverse iterator smh
	iterSequence = len(iter) - 1;
	retVal = [];
	while (iterSequence >= 0){
		retVal.append(iter.getIndex(iterSequence));
		iterSequence = iterSequence - 1;
	}
	return retVal;
}

fun getBlock(bp){
bpx = bp.getIndex(0);
bpy = bp.getIndex(1);
bpz = bp.getIndex(2);
return world.getBlockAt(bpx,bpy,bpz).getId();
}

fun getConvertedPistonVec(direction){
if (direction.uppercase() == "NORTH"){
return [0,0,1];}
if (direction.uppercase() == "SOUTH"){
return [0,0,-1];}
if (direction.uppercase() == "EAST"){
return [-1,0,0];}
if (direction.uppercase() == "WEST"){
return [1,0,0];}
if (direction.uppercase() == "UP"){
return [0,-1,0];}
if (direction.uppercase() == "DOWN"){
return [0,1,0];}
}
fun getReverse(dir) {
dir = dir.uppercase();
if (dir == "UP") {
return "DOWN";
}
if (dir == "DOWN") {
return "UP";
}
if (dir == "EAST") {
return "WEST";
}
if (dir == "WEST") {
return "EAST";
}
if (dir == "NORTH") {
return "SOUTH";
}
if (dir == "SOUTH") {
return "NORTH";
}
}
fun getBlockPos(block){
return [block.getX(), block.getY(), block.getZ()];
}
fun getDirectionId(dir) {
dir = dir.uppercase();
if (dir == "UP") {
return 1;
}
if (dir == "DOWN") {
return 0;
}
if (dir == "EAST") {
return 5;
}
if (dir == "WEST") {
return 4;
}
if (dir == "NORTH") {
return 2;
}
if (dir == "SOUTH") {
return 3;
}
}

fun toolSwitch(blockPos){
shovel = client.itemFromString("netherite_shovel").getMiningSpeedMultiplier(world.getBlockAt(blockPos.getIndex(0),blockPos.getIndex(1),blockPos.getIndex(2)));
if(shovel > 1) {return "netherite_shovel";}
pick =  client.itemFromString("netherite_pickaxe").getMiningSpeedMultiplier(world.getBlockAt(blockPos.getIndex(0),blockPos.getIndex(1),blockPos.getIndex(2)));
if(pick > 1) {return "netherite_pickaxe";}
return "netherite_pickaxe";
}
fun convertHotbarIndexToSlot(ind){
if (ind == 0){return 46;}
if (ind < 9) {return ind.modulus(9)+36;}
return null;
}

fun getSwappableHotbarSlot(){
i=0;
Slot = player.getCurrentSlot();
while (i<9){
itemStack = player.getItemForPlayerSlot((Slot+i).modulus(9));
if (itemStack.getCount() == 0){
return (Slot+i).modulus(9);}
i = i+1;
}
while (i<9){
itemStack = player.getItemForPlayerSlot((Slot+i).modulus(9));
if (itemStack.getEnchantments().isEmpty()){
return (Slot+i).modulus(9);}
i = i+1;
}
return Slot;
}
fun swapToPickaxe(){
	slot = player.getSlotFor(client.itemFromString("diamond_pickaxe"));
	if (slot == null) {
		slot = player.getSlotFor(client.itemFromString("netherite_pickaxe"));
		}
	if (slot != null) {
		if (0 <= slot-36 && slot-36  <= 8) {
		player.setSelectedSlot(slot-36);
		return true;
		} else {
			preslot = getSwappableHotbarSlot();
			player.swapPlayerSlotWithHotbar(slot);
			player.setSelectedSlot(preslot);
			}
	}
}
fun swapToItem(itemString, dummySlot){
	if (itemString == "air") {
		swapToPickaxe();
		return false;}
	foreach(i : [0,1,2,3,4,5,6,7,8]){
		if(player.getItemForPlayerSlot(i).getId() == itemString){
			player.setSelectedSlot(i);
			return false;
		}
	}
	slot = player.getSlotFor(client.itemFromString(itemString));
	retVal = false;
	if (slot == null) {return false;}
	if (player.getItemForSlot(slot).getCount() == 1) {retVal = true;}
	if (slot != null) {
		if (0 <= slot-36 && slot-36  <= 8) {
		player.setSelectedSlot(slot-36);
		return retVal;
		} else {
			preslot = getSwappableHotbarSlot();
			player.swapPlayerSlotWithHotbar(slot);
			player.setSelectedSlot(preslot);
			return retVal ;
			}
	}
	return null;
}

fun breakBlockInstant(x,y,z,requireSneak){
if (requireSneak) {player.setSneaking(true);}
player.attackBlock(x,y,z,"up");
return true;
}

fun breakBlock(x,y,z, requireSneak){
	if (world.getBlockAt(x,y,z).getHardness() == -1 || world.getBlockAt(x,y,z).isFluid() || world.isAir(x,y,z)) {return;}
	if (world.getBlockAt(x,y,z).getHardness() == 0) {breakBlockInstant(x,y,z,requireSneak);sleep(20);return;}
	if (!world.getBlockAt(x,y,z).isReplaceable() ) {
	requiredTool = toolSwitch([x,y,z]);
	swapResult = swapToItem(requiredTool,0);
	if(swapResult == false){swapToPickaxe();}
	while(!world.getBlockAt(x,y,z).isReplaceable()) {
		if (requireSneak) {player.setSneaking(true);}
		player.updateBreakingBlock(x,y,z);
		if(world.getBlockAt(x,y,z).isReplaceable()){break;}
		sleep(50);
	}}
}

fun applyCarpetProtocol(x,y,z,direction){
	dirId = getDirectionId(direction);
	if (direction == null) {return [x,y,z];}
	return [x+2*dirId + 2, y, z];
}
fun placeTorch(x,y,z,dummySlot, ignoreBlock){
if (!world.getBlockAt(x,y-1,z).sideCoversSmallSquare("up")){return false;}
if (!ignoreBlock &&!world.getBlockAt(x,y,z).isReplaceable()){breakBlock(x,y,z,false);}
swapToItem('redstone_torch',dummySlot);
player.interactBlock(x,y,z,"up",x,y-1,z,false);
}

fun matchExistingBlock(x,y,z,itemString,direction,slabTop, extended){
block = world.getBlockAt(x,y,z);
slabTopVal = "bottom";
if (slabTop) {slabTopVal = "top";} 
if (block.getId().containsString(itemString)) {
	map = block.getBlockProperties();
	if (map.getKeys().contains("type") && map.get("type") != slabTopVal) {return false;}
	if (direction != null && map.getKeys().contains("facing") && map.get("facing") != direction) {return false;}
	if (extended != null && map.getKeys().contains(" extended") && map.get(" extended") !=  extended) {return false;}
	return true;
}
return false;
}
fun setFakeRequiredYawPitchDirection(itemString, direction, duration){
	if (direction == null) {direction = "NORTH";}
	dir = direction.uppercase();
	lookRefdir = dir;
	if (itemString.containsString("piston")){
		lookRefdir = getReverse(dir);
	}
	fy = player.getYaw();
	fp = player.getPitch();
	if (lookRefdir  == "UP") {
		fy = 0;
		fp = -90; 
	}
	if (lookRefdir  == "DOWN") {
		fy = 0;
		fp = 90; 
	}
	if (lookRefdir  == "EAST") {
		fy = -90;
		fp = 0; 
	}
	if (lookRefdir  == "WEST") {
		fy = 90;
		fp = 0; 
	}
	if (lookRefdir  == "NORTH") {
		fy = 180;
		fp = 0; 
	}
	if (lookRefdir  == "SOUTH") {
		fy = 0;
		fp = 0; 
	}
	player.fakeLook(fy,fp,lookRefdir,duration);
	sleep(100);
}
fun breakReplaceDirectionBlock(x,y,z,itemString,dummyslot,direction, slabTop, accurateBlockPlacement, breakExist, requireSneak, ignoreBlock){
	if (breakExist && !matchExistingBlock(x,y,z,itemString,direction,slabTop,null)) {breakBlock(x,y,z,requireSneak);}
	if (!ignoreBlock && !world.getBlockAt(x,y,z).isReplaceable()){return false;}
	py = y;
	if (slabTop) {py = py+0.9;} 
	if (direction == null) {direction = "NORTH";}
	dir = direction.uppercase();
	lookRefdir = dir;
	if (itemString.containsString("piston")){
		lookRefdir = getReverse(dir);
	}
	fy = player.getYaw();
	fp = player.getPitch();
	if (lookRefdir  == "UP") {
		fy = 0;
		fp = -90; 
	}
	if (lookRefdir  == "DOWN") {
		fy = 0;
		fp = 90; 
	}
	if (lookRefdir  == "EAST") {
		fy = -90;
		fp = 0; 
	}
	if (lookRefdir  == "WEST") {
		fy = 90;
		fp = 0; 
	}
	if (lookRefdir  == "NORTH") {
		fy = 180;
		fp = 0; 
	}
	if (lookRefdir  == "SOUTH") {
		fy = 0;
		fp = 0; 
	}
	shouldSleepAfter = swapToItem(itemString, dummyslot);
	if (shouldSleepAfter == null){return false;}
	if (!accurateBlockPlacement || itemString.containsString("rail")) {
		player.fakeLook(fy,fp,lookRefdir,2);
		if (doSleep) {sleep(100);}
		player.interactBlock(x,y,z,lookRefdir,x,py,z,false);
	} else {
		carpetVec = applyCarpetProtocol(x,y,z,direction);
		hx = carpetVec.getIndex(0);
		hy = carpetVec.getIndex(1);
		if (slabTop) {hx = hx+32;}
		hz = carpetVec.getIndex(2);
		player.interactBlock(hx,hy,hz,direction,x,py,z,false);
	}
	return shouldSleepAfter;
}
fun breakReplaceDirectionBlockForceNosleep(x,y,z,itemString,dummyslot,direction, slabTop, accurateBlockPlacement, breakExist, requireSneak, ignoreBlock){
	if (breakExist && !matchExistingBlock(x,y,z,itemString,direction,slabTop,null)) {breakBlock(x,y,z,requireSneak);}
	if (!ignoreBlock && !world.getBlockAt(x,y,z).isReplaceable()){return false;}
	py = y;
	if (slabTop) {py = py+0.9;} 
	if (direction == null) {direction = "NORTH";}
	dir = direction.uppercase();
	lookRefdir = dir;
	if (itemString.containsString("piston")){
		lookRefdir = getReverse(dir);
	}
	fy = player.getYaw();
	fp = player.getPitch();
	if (lookRefdir  == "UP") {
		fy = 0;
		fp = -90; 
	}
	if (lookRefdir  == "DOWN") {
		fy = 0;
		fp = 90; 
	}
	if (lookRefdir  == "EAST") {
		fy = -90;
		fp = 0; 
	}
	if (lookRefdir  == "WEST") {
		fy = 90;
		fp = 0; 
	}
	if (lookRefdir  == "NORTH") {
		fy = 180;
		fp = 0; 
	}
	if (lookRefdir  == "SOUTH") {
		fy = 0;
		fp = 0; 
	}
	shouldSleepAfter = swapToItem(itemString, dummyslot);
	if (shouldSleepAfter == null){return false;}
	if (!accurateBlockPlacement || itemString.containsString("rail")) {
		player.fakeLook(fy,fp,lookRefdir,2);
		player.interactBlock(x,y,z,lookRefdir,x,py,z,false);
	} else {
		carpetVec = applyCarpetProtocol(x,y,z,direction);
		hx = carpetVec.getIndex(0);
		hy = carpetVec.getIndex(1);
		if (slabTop) {hx = hx+32;}
		hz = carpetVec.getIndex(2);
		player.interactBlock(hx,hy,hz,direction,x,py,z,false);
	}
	return shouldSleepAfter;
}
fun offset(blockPos, addPos){
bx = blockPos.getIndex(0) + addPos.getIndex(0);
by = blockPos.getIndex(1) + addPos.getIndex(1);
bz = blockPos.getIndex(2) + addPos.getIndex(2);
return [bx,by,bz];
}

//safer place function
fun place(blockPos, itemMapId, direction, addVec){
	if (doSleep) {sleep(sleepAmount);}
	blockPos = offset(blockPos, addVec);
	sleepBool = breakReplaceDirectionBlock(blockPos.getIndex(0), blockPos.getIndex(1), blockPos.getIndex(2),mapBlockRef.get(itemMapId),itemMapId,direction,mapPropertyRef.get(itemMapId), accurateBlockPlacementEnabled,replace,false,false);
	if (sleepBool){sleep(sleepAmount);}
}



fun slice1(dir, Pos){
//west
place(Pos, 1, null, [0,0,0]);
place(Pos, 1, null, [0,0,-1]);
place(Pos, 1, null, [0,1,0]);
place(Pos, 1, null, [0,0,1]);
place(Pos, 2, "west", [0,1,1]);
place(Pos, 2, "east", [0,1,-1]);
place(Pos, 3, null, [0,1,2]);
place(Pos, 3, null, [0,1,-2]);
place(Pos, 1, null, [0,2,2]);
place(Pos, 1, null, [0,2,-2]);
place(Pos, 4, "south", [0,2,1]);
place(Pos, 4, "south", [0,2,0]);
place(Pos, 6, null, [1,2,1]);
place(Pos, 6, null, [0,3,1]);
place(Pos, 6, null, [0,3,-1]);
place(Pos, 6, null, [0,3,2]);
place(Pos, 6, null, [0,3,-2]);
}


fun slice2(dir, Pos){
place(Pos, 1, null, [0,0,0]);
place(Pos, 1, null, [0,0,-1]);
place(Pos, 1, null, [0,0,1]);
place(Pos, 1, null, [0,1,-2]);
place(Pos, 1, null, [0,1,2]);
place(Pos, 7, null, [0,1,-1]);
place(Pos, 4, "south", [0,2,-1]);
place(Pos, 4, "south", [0,1,0]);
place(Pos, 6, null, [0,1,1]);
place(Pos, 5, "east", [0,2,-2]);
place(Pos, 5, "west", [0,2,2]);
place(Pos, 8, null, [1,2,1]);
}

fun slice3(dir, Pos){
place(Pos, 1, null, [0,0,0]);
place(Pos, 1, null, [0,0,-1]);
place(Pos, 1, null, [0,0,1]);
place(Pos, 4,  "south", [0,1,1]);
place(Pos, 4,  "south", [0,1,0]);
place(Pos, 2,  "west", [0,2,1]);
place(Pos, 2,  "east", [0,2,-1]);
place(Pos, 1, null, [0,2,2]);
place(Pos, 1, null, [0,2,-2]);
place(Pos, 6, null, [0,3,1]);
place(Pos, 6, null, [0,3,-1]);
place(Pos, 6, null, [0,3,2]);
place(Pos, 6, null, [0,3,-2]);
place(Pos, 6, null, [1,2,-1]);
}


fun slice4(dir,Pos){
place(Pos, 1, null, [0,0,0]);
place(Pos, 1, null, [0,0,-1]);
place(Pos, 1, null, [0,0,1]);
place(Pos, 1, null, [0,1,-2]);
place(Pos, 1, null, [0,1,2]);
place(Pos, 7, null, [0,1,1]);
place(Pos, 4, "south", [0,2,1]);
place(Pos, 4, "south", [0,1,0]);
place(Pos, 6, null, [0,1,-1]);
place(Pos, 5, "east", [0,2,-2]);
place(Pos, 5, "west", [0,2,2]);
place(Pos, 8, null, [1,1,1]);

}

fun walk(distance, yaw, pitch){
	ex = player.getX();
	ez = player.getZ();
	while ( (ex - player.getX())^2 + (ez - player.getZ())^2 < distance^2) {
		player.look(yaw,pitch);
		player.setWalking(true);
		sleep(10);
	}
	player.setWalking(false);
}
fun walkTo(toward, distance){
	ex = toward.getIndex(0);
	ey = toward.getIndex(1);
	ez = toward.getIndex(2);
	while ( (ex - player.getX())^2 + (ez - player.getZ())^2 > distance^2) {
		player.lookAtPos(ex, ey, ez);
		player.setWalking(true);
		sleep(50);
	}
	sleep(25);
	player.setWalking(false);
}



fun placeBreaking(ox,oy,oz,direction, headless, PistonType, SupportBlock){
usedBlockPosL = [];
vec = getConvertedPistonVec(direction);
vx = vec.getIndex(0);
vy = vec.getIndex(1);
vz = vec.getIndex(2);
breakReplaceDirectionBlock(ox+vx,oy+vy,oz+vz,PistonType,3,"up", false,accurateBlockPlacementEnabled,true,false,false);
usedBlockPosL.append([ox+vx,oy+vy,oz+vz]);
if (!accurateBlockPlacementEnabled){sleep(100);}
if (headless && world.getBlockAt(ox,oy,oz).getHardness() != -1) {
breakReplaceDirectionBlock(ox,oy,oz,"obsidian",4,null, false,accurateBlockPlacementEnabled,true,false,false);
usedBlockPosL.append([ox,oy,oz]);
}
if (!accurateBlockPlacementEnabled){sleep(100);}
torchSupportBool = world.getBlockAt(ox+2*vx,oy-1,oz+2*vz).isReplaceable();
breakReplaceDirectionBlock(ox+2*vx,oy-1,oz+2*vz,SupportBlock,8,null,false,false, true,false,false);
if(torchSupportBool) {sleep(50);usedBlockPosL.append([ox+2*vx,oy-1,oz+2*vz]);}
if (!accurateBlockPlacementEnabled){sleep(100);}
placeTorch(ox+2*vx,oy,oz+2*vz,7,false);
usedBlockPosL.append([ox+2*vx,oy,oz+2*vz]);
return usedBlockPosL;
}
fun processBreaking(ox,oy,oz,direction,headless, PistonType){
vec = getConvertedPistonVec(direction);
vx = vec.getIndex(0);
vy = 0;
vz = vec.getIndex(2);
swapToPickaxe();
dir = direction;
player.attackBlock(ox+2*vx,oy,oz+2*vz,"up");
player.attackBlock(ox+vx,oy,oz+vz,"up");
if (headless) {placeTorch(ox+2*vx,oy,oz+2*vz,7,false);}
breakReplaceDirectionBlockForceNosleep(ox+vx,oy,oz+vz,PistonType,3,dir, false,accurateBlockPlacementEnabled ,false,false,true);
}

fun getRequiredPositionsIsEmpty(ox,oy,oz,direction){
usedBlockPosLb = [];
if (direction =="up" || direction == "down"){

null;
}
vec = getConvertedPistonVec(direction);
vx = vec.getIndex(0);
vy = vec.getIndex(1);
vz = vec.getIndex(2);
usedBlockPosLb.append([ox+vx,oy+vy,oz+vz]);
if (world.getBlockAt(ox+2*vx,oy-1,oz+2*vz).isReplaceable()) {usedBlockPosLb.append([ox+2*vx,oy-1,oz+2*vz]);}
usedBlockPosLb.append([ox+2*vx,oy,oz+2*vz]);

foreach (requiredPositions : usedBlockPosLb){
if (!world.getBlockAt(requiredPositions).isReplaceable()){return false;}
}
return true;
}

fun makeHeadlessPistonAtHeadpos(X,Y,Z,direction, headless, PistonType, SupportBlock){

if (direction == "up" || direction == "down") {

null;
;}
usedPoses = [];
if (!accurateBlockPlacementEnabled) {setFakeRequiredYawPitchDirection("piston", "up", 5);}
usedPoses = placeBreaking(X,Y,Z,direction, headless, PistonType, SupportBlock);
sleep(250);
if (!accurateBlockPlacementEnabled) {setFakeRequiredYawPitchDirection("piston", direction, 5);}
processBreaking(X,Y,Z,direction,headless, PistonType);
sleep(50);
if (!headless) {
foreach(blockIxyz : usedPoses){
breakBlock(blockIxyz.getIndex(0), blockIxyz.getIndex(1),blockIxyz.getIndex(2),false);
}
}
}


i = 0;
fun getIterator(start, end, num){
ii = 0;
maxlen = 1000;
ret = [start];
c = start;
while (c < end && ii < maxlen){
c = c+num;
ret.append(c);
ii = ii+1;
}
return ret;
}


fun placeSponges(reach){
sx = player.getX();
sy = player.getY();
sz = player.getZ();
SxL = getIterator(sx-reach, sx+reach, 1);
SyL = getIterator(sy-reach, sy+reach, 1);
SzL = getIterator(sz-reach, sz+reach, 1);
foreach (Sx : SxL) {
foreach (Sy : SyL ) {
foreach (Sz : SzL) {
if (world.getBlockAt(Sx,Sy,Sz).getId().containsString("water")){
breakReplaceDirectionBlock(Sx,Sy,Sz,"slime_block",5,null, false, false, false, false,false);
sleep(10);
}
}
}
}
}



startRef = [341,5,387];
startP = [player.getX(), player.getY()+1.5, player.getZ()];
J=0;
while (J<0){
slice1("west",offset(startRef, [-J,0,0]));	
walkTo(offset(startP, [-J-1,0,0]), 0.2);
sleep(150);
slice2("west",offset(startRef,[-(J+1),0,0]));
walkTo(offset(startP, [-J-2,0,0]),0.2);
sleep(150);
slice3("west",offset(startRef,[-(J+2),0,0]));
walkTo(offset(startP, [-J-3,0,0]),0.2);
sleep(150);
slice4("west",offset(startRef,[-(J+3),0,0]));
walkTo(offset(startP, [-J-4,0,0]), 0.2);
sleep(150);
J=J+4;
}

fun fill(aX,aY,aZ,bX,bY,bZ){
aXL = getIterator(aX,bX,1);
aYL = getIterator(aY,bY,1);
aZL = getIterator(aZ,bZ,1);
foreach (aXi : aXL) {
foreach (aYi : aYL) {
foreach (aZi : aZL) {
if(world.isAir(aXi,aYi,aZi)){
player.interactBlock(aXi,aYi,aZi,"up",aXi,aYi,aZi,false);
sleep(10);}

}
}
}
}

fun fillFromTo(aP,bP){
aX = aP.getIndex(0);
aY = aP.getIndex(1);
aZ = aP.getIndex(2);
bX = bP.getIndex(0);
bY = bP.getIndex(1);
bZ = bP.getIndex(2);
aXL = getIterator(aX,bX,1);
aYL = getIterator(aY,bY,1);
aZL = getIterator(aZ,bZ,1);
foreach (aXi : aXL) {
foreach (aYi : aYL) {
foreach (aZi : aZL) {

if(world.getBlockAt(aXi,aYi,aZi).isReplaceable()){

player.interactBlock(aXi,aYi,aZi,"up",aXi,aYi,aZi,false);
sleep(5);}

}
}
}
}
fun attackFromTo(aP,bP){
aX = aP.getIndex(0);
aY = aP.getIndex(1);
aZ = aP.getIndex(2);
bX = bP.getIndex(0);
bY = bP.getIndex(1);
bZ = bP.getIndex(2);
aXL = getIterator(aX,bX,1);
aYL = getIterator(aY,bY,1);
aZL = getIterator(aZ,bZ,1);
foreach (aXi : aXL) {
foreach (aYi : aYL) {
foreach (aZi : aZL) {

player.attackBlock(aXi,aYi,aZi,"up");
sleep(5);

}
}
}
}

fun message(stringMessage){
player.messageActionBar(stringMessage);
sleep(500);
}

//makeHeadlessPistonAtHeadpos(pos.getBlockX(),pos.getBlockY(),pos.getBlockZ(),"west", false, "sticky_piston", "slime_block");
//breakReplaceDirectionBlockForceNosleep(pos.getX(),pos.getY()+1,pos.getZ(),"sticky_piston",0,"west",false, false,false,false,false);




fun offsetDirection(posList, direction){
 return offset( posList,getConvertedPistonVec(getReverse(direction)));
}

fun offsetDirectionAmount(posList, direction, num){
retVal = posList;
iterCount = 0;
while (iterCount<num){
iterCount = iterCount+1;
 retVal = offset( posList,getConvertedPistonVec(getReverse(direction)));
}
return retVal;
}

fun placeTorchWithFacing(posList, facing){
if (facing == "up" || facing == "down" ){return placeTorch(posList.getIndex(0),posList.getIndex(1),posList.getIndex(2),0,true);}
else {
	clickPos = offsetDirection(posList, getReverse(facing));
	if (world.getBlockAt(clickPos.getIndex(0),clickPos.getIndex(1),clickPos.getIndex(2)).sideCoversSmallSquare(facing)) {swapToItem("redstone_torch", 0); player.interactBlock( posList.getIndex(0),posList.getIndex(1),posList.getIndex(2),facing,clickPos.getIndex(0),clickPos.getIndex(1),clickPos.getIndex(2),false);}
}
}

fun placePistonWithFacing(posList, direction, itemString, accurate){
x = posList.getIndex(0);
y = posList.getIndex(1);
z = posList.getIndex(2);
	if (direction == null) {direction = "NORTH";}
	dir = direction.uppercase();
	lookRefdir = dir;
	if (itemString.containsString("piston")){
		lookRefdir = getReverse(dir);
	}
	fy = player.getYaw();
	fp = player.getPitch();
	if (lookRefdir  == "UP") {
		fy = 0;
		fp = -90; 
	}
	if (lookRefdir  == "DOWN") {
		fy = 0;
		fp = 90; 
	}
	if (lookRefdir  == "EAST") {
		fy = -90;
		fp = 0; 
	}
	if (lookRefdir  == "WEST") {
		fy = 90;
		fp = 0; 
	}
	if (lookRefdir  == "NORTH") {
		fy = 180;
		fp = 0; 
	}
	if (lookRefdir  == "SOUTH") {
		fy = 0;
		fp = 0; 
	}
	shouldSleepAfter = swapToItem(itemString, 0);
	if (shouldSleepAfter == null){return false;}
	if (!accurate) {
		//player.fakeLook(fy,fp,lookRefdir.lowercase(),2); does not work, has to work before placing
		player.interactBlock(x,y,z,lookRefdir,x,y,z,false);
		return shouldSleepAfter;
	} else {
		carpetVec = applyCarpetProtocol(x,y,z,direction);
		hx = carpetVec.getIndex(0);
		hy = carpetVec.getIndex(1);
		hz = carpetVec.getIndex(2);
		player.interactBlock(hx,hy,hz,direction,x,y,z,false);
	}
	return true;

}


fun canPlaceTorchAt(posList, facing){
x = posList.getIndex(0);
y = posList.getIndex(1);
z = posList.getIndex(2);
if(!world.getBlockAt(x,y,z).isReplaceable()){return false;}
if (facing == "up" || facing == "down" ) {return world.getBlockAt(x,y-1,z).sideCoversSmallSquare("up");}
else { 
	clickPos = offsetDirection(posList, getReverse(facing));
	return world.getBlockAt(clickPos.getIndex(0),clickPos.getIndex(1),clickPos.getIndex(2)).sideCoversSmallSquare(facing);
}
}


fun willPowerPiston(posTorch, faceTorch, posPiston, facePiston){
	if (offsetDirection(posPiston, facePiston) == posTorch) {return false;}
	if( offsetDirection(posTorch, getReverse(faceTorch)) == posPiston || offsetDirection(posTorch, getReverse(faceTorch)) == offset(posPiston,[0,1,0])) {return false;}
	if(offset(posPiston, [0,1,0]) == posTorch) {return false;}
	if (facePiston.uppercase() == "DOWN") {
		foreach (directions : ["north", "west", "east", "west"]){
				foreach(offsets : [0,1]){
					off = offset(offsetDirection(posPiston, directions), [0,offsets,0]);
					if(off == posTorch) {return true;}
				}
		}
	}
	if(offset(posPiston, [0,-1,0]) == posTorch) {return true;}
	if (facePiston.uppercase() == "UP") {
		foreach (directions : ["north", "west", "east", "west"]){
				foreach(offsets : [0,1]){
					off = offset(offsetDirection(posPiston, directions), [0,offsets,0]);
					if(off == posTorch) {return true;}
				}
		}
	}
	foreach (directions : ["north", "south", "east", "west"]){
		foreach(offsets : [0,1]){
			if(offsets == 0 && directions == facePiston) {return false;}
			off = offset(offsetDirection(posPiston, directions), [0,offsets,0]);
			if(off == posTorch) {return true;}
		}
	}
	return false;
}

fun canExtend(posPiston, facePiston){
	clickPosb = offsetDirection(posPiston, facePiston);
	return  world.getBlockAt(posPiston.getIndex(0),posPiston.getIndex(1),posPiston.getIndex(2)).isReplaceable() && world.getBlockAt(clickPosb.getIndex(0),clickPosb.getIndex(1),clickPosb.getIndex(2)).isReplaceable();
}

fun getHorizontalQcCheck(startPos, restrictedDirection, pistonPos, pistonFacing){
	if(canPlaceTorchAt(startPos, "down")) {return [startPos,"down"];}
	foreach (directionsB : ["north", "south", "east", "west"]){
		foreach(offB : [0,1]){
			offPos = offset(startPos, [0,offB,0]);
			if(restrictedDirection.lowercase() == directionsB) {continue;}
			torchAble = canPlaceTorchAt(offPos, directionsB);
			if(torchAble && willPowerPiston(offPos, directionsB, pistonPos, pistonFacing)  && willPowerPiston(offPos, directionsB, pistonPos, restrictedDirection)) {
				return [offPos, directionsB];}
			}
	}
	return false;
}
fun verifyPiston(posPiston, facePiston){
//return tweaked initial facing, torch position and torch facing
	foreach (pistdirections : ["north","south","east","west", "up", "down"]){ 
		if(pistdirections == facePiston.lowercase() || !canExtend(posPiston, pistdirections)) {continue;}
	
	foreach (directions : ["north","south","east","west","up","down"]){ 
		if(pistdirections == directions) {continue;}
		torchAbleOffL = getHorizontalQcCheck(offsetDirection(posPiston, directions),pistdirections,posPiston, facePiston);
		if(torchAbleOffL != false && torchAbleOffL.getIndex(0) != posPiston) {
			return [pistdirections, torchAbleOffL.getIndex(0), torchAbleOffL.getIndex(1)];
		}
		if(facePiston.lowercase() != "down"){
			torchAbleOffL = getHorizontalQcCheck(offsetDirection(posPiston, "down"),"",posPiston, facePiston);
			if(torchAbleOffL != false&& torchAbleOffL.getIndex(0) != posPiston) {
				return [pistdirections, torchAbleOffL.getIndex(0), torchAbleOffL.getIndex(1)];
			}
		}
	}
	}
	return false;
}

fun placeAsCalculated(posPiston, facePiston,itemString, accurate){
ver = verifyPiston(posPiston, facePiston);
if (ver == false) {return false;}
placePistonWithFacing(posPiston, ver.getIndex(0), itemString, accurate);
placeTorchWithFacing(ver.getIndex(1), ver.getIndex(2));
return ver;
}

fun breakAsCalculated(posPiston, facePiston,itemString, accurate, headless,sleepTick){
torchPosDir =  placeAsCalculated(posPiston, facePiston,itemString, accurate);
sleep(sleepTick*50);
if(torchPosDir == false) {return false;}
swapToPickaxe();
torchPos = torchPosDir.getIndex(1);
tx = torchPos.getIndex(0);
ty = torchPos.getIndex(1);
tz = torchPos.getIndex(2);
player.attackBlock(tx,ty,tz,"up");
player.attackBlock(posPiston.getIndex(0),posPiston.getIndex(1),posPiston.getIndex(2),"up");
placePistonWithFacing(posPiston, facePiston, itemString, accurate);
if (headless) {placeTorchWithFacing(torchPosDir.getIndex(1), torchPosDir.getIndex(2));}
return true;
}

fun breakTarget(posTarget, itemString, accurate, headless,sleepTick){
	foreach (pistOffsetdirections : ["north","south","east","west", "up", "down"]){ 
		testPos = offsetDirection(posTarget, pistOffsetdirections);
		testDir = getReverse(pistOffsetdirections).lowercase();
		if(breakAsCalculated(testPos, testDir, itemString, accurate, headless,sleepTick)){
			return testPos;}
	}
	return false;
}


fun canPlaceTorchAtReturnDirection(posList, restrict){
x = posList.getIndex(0);
y = posList.getIndex(1);
z = posList.getIndex(2);
foreach (facing : ["east","west","north","south","down"]){
if(facing == restrict) {continue;}
if(!world.getBlockAt(x,y,z).isReplaceable()){return false;}
if (facing == "up" || facing == "down" ) {if( world.getBlockAt(x,y-1,z).sideCoversSmallSquare("up")) {return facing;}}
else { 
	clickPos = offsetDirection(posList, getReverse(facing));
	if(world.getBlockAt(clickPos.getIndex(0),clickPos.getIndex(1),clickPos.getIndex(2)).sideCoversSmallSquare(facing)) {return facing;}
}
}
return false;
}
fun isSolidBlock(posList){
px = posList.getIndex(0);
py = posList.getIndex(1);
pz = posList.getIndex(2);
return world.getBlockAt(px,py,pz).isSolidBlock();
}
fun isReplaceable(posList){
px = posList.getIndex(0);
py = posList.getIndex(1);
pz = posList.getIndex(2);
return world.getBlockAt(px,py,pz).isReplaceable();
}
fun getPistonTorchDown(startPos, finalFacing){
	pistonPos = offsetDirection(startPos, getReverse(finalFacing));
	foreach (primaryFacing : AllDirections){
		if(primaryFacing == finalFacing || !canExtend(pistonPos, primaryFacing)){
			continue;
		}
		torchPos = offsetDirection(startPos, "down");
		torchDir = canPlaceTorchAtReturnDirection(torchPos,"");
		if(torchDir!= false){
			return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];	
		}
		foreach (solidBlockDir : Horizontal){
			solidPos = offsetDirection(pistonPos, solidBlockDir);
			if (!isSolidBlock(solidPos) || solidBlockDir == primaryFacing){
				continue;
			}
			torchPos = offsetDirection(solidPos, "down");
			torchDir = canPlaceTorchAtReturnDirection(torchPos,"");
			if(torchDir!= false){
				return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];	
			}
		}
		foreach (solidBlockDir : Horizontal){
			solidPos = offsetDirection(pistonPos, solidBlockDir);
			if(solidBlockDir == primaryFacing || !isReplaceable(solidPos)){
				continue;
			}
			foreach (torchDir : TorchDirections){
				if(solidBlockDir == torchDir) {continue;}
				foreach (offsetIter : [0,1]){
					torchPos =  offsetDirectionAmount(solidPos, "up", offsetIter);
					torchDir = canPlaceTorchAtReturnDirection(torchPos,solidBlockDir);
					if(torchDir!= false){
						return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];	
					}
				}
			}
			
		}
	}
	return false;
}
fun getPistonTorchUp(startPos, finalFacing){
	pistonPos = offsetDirection(startPos, getReverse(finalFacing));
	torchPos = offsetDirection(startPos, "up");
	torchDir = canPlaceTorchAtReturnDirection(torchPos, "down");
	foreach (primaryFacing : AllDirections){
		if(torchDir != false && canExtend(pistonPos, primaryFacing) && primaryFacing != finalFacing) {return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];}
	}
	foreach (primaryFacing : AllDirections){
		if(primaryFacing == finalFacing || !canExtend(pistonPos, primaryFacing)){
			continue;
		}
		foreach (solidBlockDir : Horizontal){
			solidPos = offsetDirection(pistonPos, solidBlockDir);
			if (!isSolidBlock(solidPos) || solidBlockDir == primaryFacing){
				continue;
			}
			torchPos = offsetDirection(solidPos, "down");
			torchDir = canPlaceTorchAtReturnDirection(torchPos,"");
			if(torchDir!= false){
				return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];	
			}
		}
		foreach (solidBlockDir : Horizontal){
			solidPos = offsetDirection(pistonPos, solidBlockDir);
			if(solidBlockDir == primaryFacing || !isReplaceable(solidPos)){
				continue;
			}
			foreach (torchDir : TorchDirections){
				if(solidBlockDir == torchDir) {continue;}
				foreach (offsetIter : [0,1]){
					torchPos =  offsetDirectionAmount(solidPos, "up", offsetIter);
					torchDir = canPlaceTorchAtReturnDirection(torchPos,solidBlockDir);
					if(torchDir!= false){
						return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];	
					}
				}
			}
			
		}
	}
	return false;
}
fun getPistonTorchPosDir(startPos, finalFacing){
	if(finalFacing.lowercase() == "down") {return getPistonTorchDown(startPos, "down");}
	if(finalFacing.lowercase() == "up") {return getPistonTorchUp(startPos,  "up");}
	pistonPos = offsetDirection(startPos, getReverse(finalFacing));
	torchPos = offsetDirection(startPos,"up");
	torchDir = "down";
	foreach (primaryFacing: AllDirections) {
		if(primaryFacing == "up") {continue;}
		if(primaryFacing != finalFacing && canExtend(pistonPos, primaryFacing) && canPlaceTorchAt(torchPos,torchDir)) {return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];}
	}
	torchPos = offsetDirection(pistonPos,"up");
	foreach (primaryFacing: AllDirections) {
		if(primaryFacing == "up") {continue;}
		torchDir = canPlaceTorchAtReturnDirection(torchPos,"down");
		if(primaryFacing != finalFacing && canExtend(pistonPos, primaryFacing) && torchDir!=false ) {return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];}
	}
	foreach (primaryFacing : AllDirections){
		if(primaryFacing == finalFacing || !canExtend(pistonPos, primaryFacing)){
			continue;
		}
		torchPos = offsetDirection(pistonPos, "down");
		torchDir = canPlaceTorchAtReturnDirection(torchPos,"");
		if(torchDir!= false){
			return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];	
		}
		foreach (solidBlockDir : Horizontal){
			solidPos = offsetDirection(pistonPos, solidBlockDir);
			if (!isSolidBlock(solidPos) || solidBlockDir == primaryFacing){
				continue;
			}
			torchPos = offsetDirection(solidPos, "down");
			torchDir = canPlaceTorchAtReturnDirection(torchPos,"");
			if(torchDir!= false){
				return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];	
			}
		}
		foreach (solidBlockDir : Horizontal){
			solidPos = offsetDirection(pistonPos, solidBlockDir);
			if(solidBlockDir == primaryFacing || !isReplaceable(solidPos)){
				continue;
			}
			foreach (torchDir : TorchDirections){
				if(solidBlockDir == torchDir) {continue;}
				foreach (offsetIter : [0,1]){
					torchPos = offsetDirectionAmount(solidPos, "up", offsetIter);
					torchDir = canPlaceTorchAtReturnDirection(torchPos,solidBlockDir);
					if(torchDir!= false){
						return [pistonPos, finalFacing, primaryFacing, torchPos, torchDir];	
					}
				}
			}
			
		}
	}
	return false;
}
fun attackBlock(posList, dir){
px = posList.getIndex(0);
py = posList.getIndex(1);
pz = posList.getIndex(2);
player.attackBlock(px,py,pz,dir);
}
fun clearBlockList(posLists){
i = 0;
foreach(posList : posLists){
 i = i+1;
px = posList.getIndex(0);
py = posList.getIndex(1);
pz = posList.getIndex(2);
player.attackBlock(px,py,pz,"up");
if(i.modulus(16) == 0){sleep(50);}
}
}

fun calcAvailableBreakingPiston(posTarget, itemString, accurate, headless,sleepTick, specifyDir, afterClean){
	foreach (testFacing : AllDirections){
		if(specifyDir != false) {if(specifyDir != getReverse(testFacing).lowercase()) {continue;}}
		res = getPistonTorchPosDir(posTarget, getReverse(testFacing));
		if(res != false) {
			pistonPos = res.getIndex(0);
			finalFacing = res.getIndex(1);
			primaryFacing = res.getIndex(2);
			torchPos = res.getIndex(3);
			torchDir = res.getIndex(4);
			if(!accurate) {setFakeRequiredYawPitchDirection(itemString, primaryFacing, sleepTick);
			sleep(20);}
			placePistonWithFacing(pistonPos, primaryFacing, itemString, accurate);
			placeTorchWithFacing(torchPos, torchDir);
			swapToPickaxe();
			if(!accurate) {sleep(sleepTick*50 - 50);setFakeRequiredYawPitchDirection(itemString,finalFacing, sleepTick); sleep(50);}
			else {sleep(sleepTick*50);}
			//t p t p
			attackBlock(torchPos,"up");
			attackBlock(pistonPos,"up");
			if (headless) {placeTorchWithFacing(torchPos, torchDir);}
			placePistonWithFacing(pistonPos, finalFacing, itemString, accurate);
			if(afterClean) {
			sleep(55);
			swapToPickaxe();
			attackBlock(pistonPos,"up");
			}
			return pistonPos;
		}
	}
	return false;

}

pos = player.getLookingAtBlock();
//getBlockPos(pos);
//message(breakTarget(getBlockPos(pos),"sticky_piston",true,false,3));

//res = calcAvailableBreakingPiston(getBlockPos(pos), "sticky_piston",true,false,3, false,true);
fun makePlatform(pos, radius){
fillFromTo(offset(getBlockPos(pos),[- radius,0,- radius]),offset(getBlockPos(pos),[ radius,0, radius]));
}
fun makePlatform2(pos, radius){
fillFromTo(offset(pos,[- radius,0,- radius]),offset(pos,[ radius,0, radius]));
}
//makePlatform(pos, 32);


//fillFromTo([-5661, 137,1762],[-5661, 137,1795]);

fun spruce(reach){
sx = player.getX();
sy = player.getY();
sz = player.getZ();
SxL = getIterator(sx-reach, sx+reach, 1);
SyL = getIterator(sy-reach, sy+reach, 1);
SzL = getIterator(sz-reach, sz+reach, 1);
foreach (Sx : SxL) {
foreach (Sy : SyL ) {
foreach (Sz : SzL) {
if(world.getBlockAt(Sx,Sy,Sz).getId() == "podzol" && world.getBlockAt(Sx+1,Sy,Sz).getId() == "podzol" && world.getBlockAt(Sx,Sy,Sz+1).getId() == "podzol" && world.getBlockAt(Sx+1,Sy,Sz+1).getId() == "podzol"){
swapToItem("spruce_sapling",4);
fillFromTo([Sx,Sy+1,Sz], [Sx+1,Sy+1,Sz+1]);
return;
}
}
}
}
}
//while(true){
//spruce(5);
//sleep(1400);
//}

//placePistonWithFacing([8,5,-15], "west", "sticky_piston",true);
fun withinReach(pX,pY,pZ,reach){
return (player.getX() - pX)^2 + (player.getY() - pY)^2 + (player.getZ() - pZ)^2 < reach ^2;
}

fun getToolDurability(itemString){
slot = player.getSlotFor(client.itemFromString(itemString));
return player.getItemForSlot(slot).getDurability();
}

fun repair(itemString){
if (getToolDurability(itemString) > 1900) {return;}
//expect bottle at offhand
sleep(50);
if(player.getItemForSlot(45).getCount() == 0){
throwRuntimeError("");  
}
swapToItem(itemString,0);
while (getToolDurability(itemString) > 0 && getToolDurability(itemString) < 1905) {
player.use("once");
player.use("once");
player.use("once"); //throw 3 at 1 tick
sleep(50);
}
}
fun fillWithNetherrack(pos){
fillItem = "slime_block";
if(world.getBlockAt(pos.getIndex(0),pos.getIndex(1),pos.getIndex(2)).isFluidSource()){
swapToItem(fillItem,0);
player.interactBlock(pos.getIndex(0),pos.getIndex(1),pos.getIndex(2),"up",pos.getIndex(0),pos.getIndex(1),pos.getIndex(2),false);
sleep(5);
}


}

fun findPistonUnexpected(pistonPosList){
l = [];
foreach(pistonPos : pistonPosList){
foreach ( dir : AllDirections){
if(getBlock(offsetDirection(pistonPos, dir)) == 'piston' && !pistonPosList.contains(offsetDirection(pistonPos, dir)) ){
	l.append(offsetDirection(pistonPos, dir));
}
}}
return l;
}
fun breakArea(aP,bP, itemString,accurate, useBasic, yReverse, reachDistance, sleepTick){
player.setSneaking(true);
sleep(150);
pistonPosList = [];
threshold = 8;
sleepAfterClean = 15;
aX = aP.getIndex(0);
aY = aP.getIndex(1);
aZ = aP.getIndex(2);
bX = bP.getIndex(0);
bY = bP.getIndex(1);
bZ = bP.getIndex(2);
aXL = getIterator(aX,bX,1);
aYL = getIterator(aY,bY,1);
if(yReverse) {aYL = reverseList(aYL);}
aZL = getIterator(aZ,bZ,1);
aXLb = getIterator(aX-4,bX+4,1);
aYLb = getIterator(aY,bY,1);
if(yReverse) {aYLb = reverseList(aYLb);}
aZLb = getIterator(aZ-4,bZ+4,1);
foreach (aXi : aXLb) {
foreach (aYi : aYLb) {
foreach (aZi : aZLb) {
fillWithNetherrack([aXi,aYi,aZi]);
if(world.getBlockAt(aXi,aYi,aZi).getId() == 'slime_block') {attackBlock([aXi,aYi,aZi],"down");}
}
}
}
foreach (aXi : aXL) {
foreach (aYi : aYL) {
foreach (aZi : aZL) {
if(len(pistonPosList) > threshold){
pistonPosListnew = findPistonUnexpected(pistonPosList);
pistonPosList = pistonPosList.concat(pistonPosListnew);
swapToPickaxe();
clearBlockList(pistonPosList);
pistonPosList = [];
sleep(sleepAfterClean);
}
repair("netherite_pickaxe");
repair("netherite_shovel");
fillWithNetherrack([aXi,aYi,aZi]);
if(!world.isAir(aXi,aYi,aZi) &&!world.getBlockAt(aXi,aYi,aZi).isReplaceable() && world.getBlockAt(aXi,aYi,aZi).getHardness() == -1){
	if(!withinReach(aXi,aYi,aZi,reachDistance)){continue;}
	
	if (!useBasic) {
		player.say(itemString);
		result = calcAvailableBreakingPiston([aXi,aYi,aZi], itemString, accurate, false, sleepTick, false,true);
		if(result!= false) {pistonPosList.append(result);sleep(25);}}
	else {a = breakTarget([aXi,aYi,aZi],itemString,true,false,3);
		if(a != false) {sleep(150);attackBlock(a,"down");}
	}
}
else {
	if(!world.isAir(aXi,aYi,aZi)){breakBlock(aXi,aYi,aZi,false);}
}
}
}
}
}
fun clearNether(p1,p2, yReverse, reachDistance,accurate, useBasic, sleepTick){
i = 0;
while (true){
breakArea(p1,p2,"piston",accurate, useBasic, yReverse, reachDistance, sleepTick);
world = client.getWorld();
sleep(100);
player.messageActionBar(i);
i = i+1;
if (i == 20) {
break;}
}
}



fun interactAction(aP){
aX = aP.getIndex(0);
aY = aP.getIndex(1);
aZ = aP.getIndex(2);
player.interactBlock(aX,aY,aZ,"up",aX,aY,aZ,false);
}

fun iterateArea(aP,bP){
ret = [];
aX = aP.getIndex(0);
aY = aP.getIndex(1);
aZ = aP.getIndex(2);
bX = bP.getIndex(0);
bY = bP.getIndex(1);
bZ = bP.getIndex(2);
aXL = getIterator(aX,bX,1);
aYL = getIterator(aY,bY,1);
aZL = getIterator(aZ,bZ,1);
foreach (aXi : aXL) {
foreach (aYi : aYL) {
foreach (aZi : aZL) {
ret.append([aXi,aYi,aZi]);


}
}
}
return ret;
}
fun fillFromToPer(aP,bP,per){
aX = aP.getIndex(0);
aY = aP.getIndex(1);
aZ = aP.getIndex(2);
bX = bP.getIndex(0);
bY = bP.getIndex(1);
bZ = bP.getIndex(2);
aXL = getIterator(aX,bX,1);
aYL = getIterator(aY,bY,1);
aZL = getIterator(aZ,bZ,1);
i=0;
foreach (aXi : aXL) {
foreach (aYi : aYL) {
foreach (aZi : aZL) {
i=i +1;
if(world.getBlockAt(aXi,aYi,aZi).isReplaceable()){
if (i.modulus(per) == 0){
player.interactBlock(aXi,aYi,aZi,"up",aXi,aYi,aZi,false);
sleep(5);}}

}
}
}
}



leverPos = [203,43,528];
buttonPos = [201,46,528];
stonecutterAt = [201,47,528];

fun resetJob(stationPos){
	breakBlock(stationPos.getIndex(0), stationPos.getIndex(1), stationPos.getIndex(2), true);
	sleep(20);
	swapToItem("stonecutter",0);
	sleep(20);
	player.interactBlock(stationPos.getIndex(0), stationPos.getIndex(1), stationPos.getIndex(2),"down",stationPos.getIndex(0), stationPos.getIndex(1), stationPos.getIndex(2),false);
}
fun noVillagerWait(){
		if(player.getSlotFor(client.itemFromString("emerald")) == null) {stop();}
		allEntities = client.getWorld().getAllEntities();
		foreach (entity : allEntities) {
	   	 	if (entity.getId() == "villager" && player.getSquaredDistanceTo(entity) < 12) {
	       		 return false;
 	  		 }
		}
		return true;

}
fun startInteract(){
	while (player.getCurrentScreen() == null){
		if(noVillagerWait()){stop();}
		allEntities = client.getWorld().getAllEntities();
		foreach (entity : allEntities) { 
	   	 	if (entity.getId() == "villager" && player.getSquaredDistanceTo(entity) < 12) {
	       		 player.interactWithEntity(entity);
			sleep(100);
			if(player.getCurrentScreen() != null){
				break;}
 	  		 }
		}
	sleep(100);}
}

fun tradeOnce(itemString){
	itemStack = client.itemFromString(itemString);
	index = null;
	try{
	index = player.getIndexOfTradeItem(itemStack);
	}
	catch(error){
	return;
	}
	if(index == null){
	while (player.getCurrentScreen() != null){
		player.closeScreen();
	sleep(50);
	}
	return;
	}
	while (!player.isTradeSelected()){
	player.selectTrade(index);
	sleep(25);
	}
	while (!player.isTradeDisabled(index)){
	player.tradeSelectedRecipeAndThrow();
	sleep(5);
	}
	player.clearTrade();
	while (player.getCurrentScreen() != null){
		player.closeScreen();
	sleep(50);
	}
}
fun tradeWithoutInventory(index){
	res = 0;
	while (!player.isTradeDisabled(index)){
	while (!player.isTradeDisabled(index) && !player.isTradeSelected()){
	player.selectTrade(index);
	sleep(50);
	}
	player.tradeSelectedRecipeAndThrow();
	res = res+1;
	sleep(2);
	}
	return res;
}
fun getTradeListMatches(itemString){
	itemList = [];
	tradeA=0;
	try{
		while(true){
		item = player.getTradeItemForIndex(tradeA);
		if (item.getId().containsString(itemString)) {
			itemList.append(tradeA);
		}
		tradeA = tradeA+1;
		}
	}
	catch(error){
	return itemList;
	}
	return itemList;
}
fun tradeMatchString(itemString, useInv){
	tradeL = getTradeListMatches(itemString);
	res = 0;
	foreach (idx : tradeL){
		if (useInv) {player.tradeIndex(idx);} else {
		res = res + tradeWithoutInventory(idx);}
	}
	player.clearTrade();
//	sleep(50);
	player.closeScreen();
	return res;
}


fun pushButtonAndFindMinecart(buttonPos, leverPos){
	//player.interactBlock(leverPos.getIndex(0), leverPos.getIndex(1), leverPos.getIndex(2),"down",leverPos.getIndex(0), leverPos.getIndex(1), leverPos.getIndex(2),false);
	//sleep(150);
	player.interactBlock(buttonPos.getIndex(0), buttonPos.getIndex(1), buttonPos.getIndex(2),"down",buttonPos.getIndex(0), buttonPos.getIndex(1), buttonPos.getIndex(2),false);
	sleep(1000);
	//player.interactBlock(leverPos.getIndex(0), leverPos.getIndex(1), leverPos.getIndex(2),"down",leverPos.getIndex(0), leverPos.getIndex(1), leverPos.getIndex(2),false);
	//sleep(150);
}

while (false){
resetJob(stonecutterAt);
startInteract();
sleep(200);
 tradeOnce("brick");
sleep(500);
pushButtonAndFindMinecart(buttonPos, leverPos);
sleep(5000);

}

fun getItemCount(itemString){
try{
	return player.getItemForSlot(player.getSlotFor(client.itemFromString(itemString))).getCount();}
catch (exception) {return 0;}
}
fun getFullName(idx){
	return player.getTradeItemForIndex(idx).getId();
}
fun tradeMatchStringOnlyOnce(itemString, mapModified){
	tradeL = getTradeListMatches(itemString);
	foreach (idx : tradeL){
		fullName = getFullName(idx);
		player.messageActionBar(fullName);
		if(mapModified.getKeys().contains(fullName)){
			continue;
		}
		mapModified.put(fullName, true);
		if(getItemCount(fullName) != 0){continue;}
		player.tradeIndex(idx);
	}
	sleep(50);
	player.closeScreen();
	return mapModified;
}

fun tradeMacro(){
		allEntities = client.getWorld().getAllEntities();
		foreach (entity : allEntities) { 
	   	 	if (entity.getId() == "villager" && player.getSquaredDistanceTo(entity) < 12) {
			while(player.getCurrentScreen() == null){
	       		 player.interactWithEntity(entity);
			sleep(50);
			}
			if(player.getCurrentScreen() != null){
				tradeOnce("chiseled_stone_bricks");
			sleep(50);}
 	  		 }
		}
}
//tradeMacro();
//calcAvailableBreakingPiston(getBlockPos(pos), "piston",true,false,3, false,true); //calcAvailableBreakingPiston(posTarget, itemString, accurate, headless,sleepTick, specifyDir, afterClean)
//clearNether([0,127,480],[530,129,1010	],true, 400,true,false,1);
fun tradeTerraCotta(){
		allEntities = client.getWorld().getAllEntities();
		m = 0;
		t = player.getMilliTime();
		while(true){
		foreach (entity : allEntities) { 
	   	 	if (entity.getId() == "villager" && player.getSquaredDistanceTo(entity) < 12) {
			while(player.getCurrentScreen() == null){
	       		 player.interactWithEntity(entity);
			sleep(50);
			}
			if(player.getCurrentScreen() != null){
				try{
				m = m+ tradeMatchString("terracotta", false);
				}
				catch(e){
				sleep(50);
				continue;}
			sleep(50);}
 	  		 }
		}
	//player.say( m / (player.getMilliTime() - t) * 1000);
	sleep(50);
	
		}}

fun throwEmptyShulkerbox(){
	slots = player.getAllSlotsFor(client.itemFromString("shulker_box"));
	foreach(Slots : slots){
		try{
			slotLen = len(player.getItemForSlot(Slots).getNbt().get("BlockEntityTag").get("Items"));
			if(slotLen == 0){
				player.clickSlot(Slots, 1, "throw");
			};
		}
		catch (exception){
				player.clickSlot(Slots, 1, "throw");
		}
	}

}
fun getEmptySlot(){
//9~35
	foreach (slots : player.getAllSlotsFor(client.itemFromString("air"))){
		if(slots >8 && slots < 36) {
			return slots;
		}
	}
	return null;
}
fun hasSingleShulkerWithItem(itemString, amount){
	count = 0;
	slots = player.getAllSlotsFor(client.itemFromString("shulker_box"));
	foreach(Slots : slots){
		try{
			shulker = player.getItemForSlot(Slots);
			if(shulker.getCount() >1) {continue;}
			shulkerItems = player.getItemForSlot(Slots).getNbt().get("BlockEntityTag").get("Items");
			if(shulkerItems == null){continue;}
			hasItem = false;
			foreach(item : shulkerItems){
				if(item.get("id").containsString(itemString)) {
					hasItem = true;
					break;
				}	
			}
			if(hasItem) {count = count+1;}
			if(count >= amount) {return true;}
		}
		catch (exception){
			continue;
		}
	}
	return false;
}

fun getStackedShulkerWithItem(itemString){
	slots = player.getAllSlotsFor(client.itemFromString("shulker_box"));
	foreach(Slots : slots){
		try{
			shulker = player.getItemForSlot(Slots);
			if(shulker.getCount() ==1) {continue;}
			shulkerItems = player.getItemForSlot(Slots).getNbt().get("BlockEntityTag").get("Items");
			foreach(item : shulkerItems){
				if(item.get("id").containsString(itemString)) {
					return Slots;
				}
			}
		}
		catch (exception){
			continue;
		}
	};
	return -1;
}
fun processRefillPre(itemString){
	throwEmptyShulkerbox();
	if(!hasSingleShulkerWithItem(itemString,3)){
		client.holdKey("y",200);
		sleep(200);
		unpackSlot = getStackedShulkerWithItem(itemString);
		if(unpackSlot == -1) {stop();}
		emptySlot = getEmptySlot();
		if(emptySlot == null) {stop();}
		player.clickSlot(unpackSlot, 1, "pickup");
		player.clickSlot(emptySlot, 1, "pickup");
		player.clickSlot(unpackSlot, 0, "pickup");
		client.holdKey("y",200);
		sleep(200);
	}
}
//clearNether([0,127,0],[5,129,5],true, 4,false,false,1.5); //clearNether(p1,p2, yReverse, reachDistance,accurate, useBasic, sleepTick)

calcAvailableBreakingPiston(getBlockPos(pos), "piston",false,false,1.3, false,true); //calcAvailableBreakingPiston(posTarget, itemString, accurate, headless,sleepTick, specifyDir, afterClean)
//no accurateblockplacement = 1.3 is reliable maximum fastest speed in sp