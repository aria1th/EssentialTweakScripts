client = getMinecraftClient();
player = client.getPlayer();
world = client.getWorld();

accurateBlockPlacementEnabled =false;
replace = false;
doSleep = false;
sleepAmount = 50;

mapBlockRef = {
	1 : "white_concrete",
	2 : "sticky_piston",
	3 : "note_block",
	4 : "powered_rail",
	5 : "repeater",
	6 : "white_stained_glass",
	7 : "iron_trapdoor",
	8 : "air"
};
mapPropertyRef = {
	1 : false,
	2 : false,
	3 : false,
	4 : false,
	5 : false,
	6 : false,
	7 : true,
	8 : false
};

fun getConvertedPistonVec(direction){
if (direction.uppercase() == "NORTH"){
return [0,0,1];}
if (direction.uppercase() == "SOUTH"){
return [0,0,-1];}
if (direction.uppercase() == "EAST"){
return [1,0,0];}
if (direction.uppercase() == "WEST"){
return [-1,0,0];}

}
fun getReverse(dir) {
dir = dir.uppercase();
if (dir == "UP") {
return "DOWN";
}
if (dir == "DOWN") {
return "UP";
}
if (dir == "EAST") {
return "WEST";
}
if (dir == "WEST") {
return "EAST";
}
if (dir == "NORTH") {
return "SOUTH";
}
if (dir == "SOUTH") {
return "NORTH";
}
}

fun getDirectionId(dir) {
dir = dir.uppercase();
if (dir == "UP") {
return 1;
}
if (dir == "DOWN") {
return 0;
}
if (dir == "EAST") {
return 5;
}
if (dir == "WEST") {
return 4;
}
if (dir == "NORTH") {
return 3;
}
if (dir == "SOUTH") {
return 2;
}
}


fun convertHotbarIndexToSlot(ind){
if (ind == 0){return 46;}
if (ind < 9) {return ind.modulus(9)+36;}
return null;
}

fun getSwappableHotbarSlot(){
i=0;
Slot = player.getCurrentSlot();
while (i<9){
itemStack = player.getItemForMainSlot((Slot+i).modulus(9));
if (itemStack.getCount() == 0){
return (Slot+i).modulus(9);}
i = i+1;
}
while (i<9){
itemStack = player.getItemForMainSlot((Slot+i).modulus(9));
if (itemStack.getEnchantments().isEmpty()){
return (Slot+i).modulus(9);}
i = i+1;
}
return Slot;
}
fun swapToPickaxe(){
	slot = player.getSlotFor(client.itemFromString("diamond_pickaxe"));
	if (slot == null) {
		slot = player.getSlotFor(client.itemFromString("netherite_pickaxe"));
		}
	if (slot != null) {
		if (0 <= slot-36 && slot-36  <= 8) {
		player.setSelectedSlot(slot-36);
		return true;
		} else {
			preslot = getSwappableHotbarSlot();
			player.swapMainSlotWithHotbar(slot);
			player.setSelectedSlot(preslot);
			}
	}
}
fun swapToItem(itemString, dummySlot){
	if (itemString == "air") {
		swapToPickaxe();
		return true;}
	slot = player.getSlotFor(client.itemFromString(itemString));
	if (slot != null) {
		if (0 <= slot-36 && slot-36  <= 8) {
		player.setSelectedSlot(slot-36);
		return true;
		} else {
			preslot = getSwappableHotbarSlot();
			player.swapMainSlotWithHotbar(slot);
			player.setSelectedSlot(preslot);
			return true;
			}
	}
	return false;
}

fun breakBlockInstant(x,y,z,requireSneak){
if (requireSneak) {player.setSneaking(true);}
player.attackBlock(x,y,z,"up");
return true;
}

fun breakBlock(x,y,z, requireSneak){
	if (world.getBlockAt(x,y,z).getHardness() == 0) {breakBlockInstant(x,y,z,requireSneak);sleep(20);return;}
	if (!world.getBlockAt(x,y,z).isReplaceable() ) {swapToPickaxe();}
	while(!world.getBlockAt(x,y,z).isReplaceable()) {
		if (requireSneak) {player.setSneaking(true);}
		player.updateBreakingBlock(x,y,z);
		sleep(50);
	}
	sleep(100);
}

fun applyCarpetProtocol(x,y,z,direction){
	dirId = getDirectionId(direction);
	if (direction == null) {return [x,y,z];}
	return [x+2*dirId + 2, y, z];
}
fun placeTorch(x,y,z,dummySlot, ignoreBlock){
if (!ignoreBlock &&!world.getBlockAt(x,y,z).isReplaceable()){breakBlock(x,y,z,false);}
swapToItem('redstone_torch',dummySlot);
player.interactBlock(x,y,z,"up",x,y-1,z,false);
}

fun matchExistingBlock(x,y,z,itemString,direction,slabTop, extended){
block = world.getBlockAt(x,y,z);
slabTopVal = "bottom";
if (slabTop) {slabTopVal = "top";} 
if (block.getId().containsString(itemString)) {
	map = block.getBlockProperties();
	if (map.getKeys().contains("type") && map.get("type") != slabTopVal) {return false;}
	if (direction != null && map.getKeys().contains("facing") && map.get("facing") != direction) {return false;}
	if (extended != null && map.getKeys().contains(" extended") && map.get(" extended") !=  extended) {return false;}
	return true;
}
return false;
}
fun setFakeRequiredYawPitchDirection(itemString, direction, duration){
	if (direction == null) {direction = "NORTH";}
	dir = direction.uppercase();
	lookRefdir = dir;
	if (itemString.containsString("piston")){
		lookRefdir = getReverse(dir);
	}
	fy = player.getYaw();
	fp = player.getPitch();
	if (lookRefdir  == "UP") {
		fy = 0;
		fp = -90; 
	}
	if (lookRefdir  == "DOWN") {
		fy = 0;
		fp = 90; 
	}
	if (lookRefdir  == "EAST") {
		fy = -90;
		fp = 0; 
	}
	if (lookRefdir  == "WEST") {
		fy = 90;
		fp = 0; 
	}
	if (lookRefdir  == "NORTH") {
		fy = 180;
		fp = 0; 
	}
	if (lookRefdir  == "SOUTH") {
		fy = 0;
		fp = 0; 
	}
	player.fakeLook(fy,fp,lookRefdir,duration);
	sleep(100);
}
fun breakReplaceDirectionBlock(x,y,z,itemString,dummyslot,direction, slabTop, accurateBlockPlacement, breakExist, requireSneak, ignoreBlock){
	if (breakExist && !matchExistingBlock(x,y,z,itemString,direction,slabTop,null)) {breakBlock(x,y,z,requireSneak);}
	if (!ignoreBlock && !world.getBlockAt(x,y,z).isReplaceable()){return false;}
	py = y;
	if (slabTop) {py = py+0.9;} 
	if (direction == null) {direction = "NORTH";}
	dir = direction.uppercase();
	lookRefdir = dir;
	if (itemString.containsString("piston")){
		lookRefdir = getReverse(dir);
	}
	fy = player.getYaw();
	fp = player.getPitch();
	if (lookRefdir  == "UP") {
		fy = 0;
		fp = -90; 
	}
	if (lookRefdir  == "DOWN") {
		fy = 0;
		fp = 90; 
	}
	if (lookRefdir  == "EAST") {
		fy = -90;
		fp = 0; 
	}
	if (lookRefdir  == "WEST") {
		fy = 90;
		fp = 0; 
	}
	if (lookRefdir  == "NORTH") {
		fy = 180;
		fp = 0; 
	}
	if (lookRefdir  == "SOUTH") {
		fy = 0;
		fp = 0; 
	}
	if (!swapToItem(itemString, dummyslot)){return false;}
	if (!accurateBlockPlacement || itemString.containsString("rail")) {
		player.fakeLook(fy,fp,lookRefdir,2);
		if (doSleep) {sleep(100);}
		player.interactBlock(x,y,z,lookRefdir,x,py,z,false);
	} else {
		carpetVec = applyCarpetProtocol(x,y,z,direction);
		hx = carpetVec.getIndex(0);
		hy = carpetVec.getIndex(1);
		if (slabTop) {hx = hx+32;}
		hz = carpetVec.getIndex(2);
		player.interactBlock(hx,hy,hz,direction,x,py,z,false);
	}
	return true;
}

fun offset(blockPos, addPos){
bx = blockPos.getIndex(0) + addPos.getIndex(0);
by = blockPos.getIndex(1) + addPos.getIndex(1);
bz = blockPos.getIndex(2) + addPos.getIndex(2);
return [bx,by,bz];
}


fun place(blockPos, itemMapId, direction, addVec){
	if (doSleep) {sleep(sleepAmount);}
	blockPos = offset(blockPos, addVec);
	return breakReplaceDirectionBlock(blockPos.getIndex(0), blockPos.getIndex(1), blockPos.getIndex(2),mapBlockRef.get(itemMapId),itemMapId,direction,mapPropertyRef.get(itemMapId), accurateBlockPlacementEnabled,replace,false,false);
}



fun slice1(dir, Pos){
//west
place(Pos, 1, null, [0,0,0]);
place(Pos, 1, null, [0,0,-1]);
place(Pos, 1, null, [0,1,0]);
place(Pos, 1, null, [0,0,1]);
place(Pos, 2, "west", [0,1,1]);
place(Pos, 2, "east", [0,1,-1]);
place(Pos, 3, null, [0,1,2]);
place(Pos, 3, null, [0,1,-2]);
place(Pos, 1, null, [0,2,2]);
place(Pos, 1, null, [0,2,-2]);
place(Pos, 4, "south", [0,2,1]);
place(Pos, 4, "south", [0,2,0]);
place(Pos, 6, null, [1,2,1]);
place(Pos, 6, null, [0,3,1]);
place(Pos, 6, null, [0,3,-1]);
place(Pos, 6, null, [0,3,2]);
place(Pos, 6, null, [0,3,-2]);
}


fun slice2(dir, Pos){
place(Pos, 1, null, [0,0,0]);
place(Pos, 1, null, [0,0,-1]);
place(Pos, 1, null, [0,0,1]);
place(Pos, 1, null, [0,1,-2]);
place(Pos, 1, null, [0,1,2]);
place(Pos, 7, null, [0,1,-1]);
place(Pos, 4, "south", [0,2,-1]);
place(Pos, 4, "south", [0,1,0]);
place(Pos, 6, null, [0,1,1]);
place(Pos, 5, "east", [0,2,-2]);
place(Pos, 5, "west", [0,2,2]);
place(Pos, 8, null, [1,2,1]);
}

fun slice3(dir, Pos){
place(Pos, 1, null, [0,0,0]);
place(Pos, 1, null, [0,0,-1]);
place(Pos, 1, null, [0,0,1]);
place(Pos, 4,  "south", [0,1,1]);
place(Pos, 4,  "south", [0,1,0]);
place(Pos, 2,  "west", [0,2,1]);
place(Pos, 2,  "east", [0,2,-1]);
place(Pos, 1, null, [0,2,2]);
place(Pos, 1, null, [0,2,-2]);
place(Pos, 6, null, [0,3,1]);
place(Pos, 6, null, [0,3,-1]);
place(Pos, 6, null, [0,3,2]);
place(Pos, 6, null, [0,3,-2]);
place(Pos, 6, null, [1,2,-1]);
}


fun slice4(dir,Pos){
place(Pos, 1, null, [0,0,0]);
place(Pos, 1, null, [0,0,-1]);
place(Pos, 1, null, [0,0,1]);
place(Pos, 1, null, [0,1,-2]);
place(Pos, 1, null, [0,1,2]);
place(Pos, 7, null, [0,1,1]);
place(Pos, 4, "south", [0,2,1]);
place(Pos, 4, "south", [0,1,0]);
place(Pos, 6, null, [0,1,-1]);
place(Pos, 5, "east", [0,2,-2]);
place(Pos, 5, "west", [0,2,2]);
place(Pos, 8, null, [1,1,1]);

}

fun walk(distance, yaw, pitch){
	ex = player.getX();
	ez = player.getZ();
	while ( (ex - player.getX())^2 + (ez - player.getZ())^2 < distance^2) {
		player.look(yaw,pitch);
		player.setWalking(true);
		sleep(10);
	}
	player.setWalking(false);
}
fun walkTo(toward, distance){
	ex = toward.getIndex(0);
	ey = toward.getIndex(1);
	ez = toward.getIndex(2);
	while ( (ex - player.getX())^2 + (ez - player.getZ())^2 > distance^2) {
		player.lookAtPos(ex, ey, ez);
		player.setWalking(true);
		sleep(50);
	}
	player.setWalking(false);
}


startRef = [227,5,-139];
startP = [player.getX(), player.getY()+1.5, player.getZ()];
i=0;
while (i<0){
slice1("west",offset(startRef, [-i,0,0]));	
walkTo(offset(startP, [-i-1,0,0]), 0.2);
slice2("west",offset(startRef,[-(i+1),0,0]));
walkTo(offset(startP, [-i-2,0,0]),0.2);
slice3("west",offset(startRef,[-(i+2),0,0]));
walkTo(offset(startP, [-i-3,0,0]),0.2);
slice4("west",offset(startRef,[-(i+3),0,0]));
walkTo(offset(startP, [-i-4,0,0]), 0.2);
i=i+4;
}

fun placeBreaking(ox,oy,oz,direction){
vec = getConvertedPistonVec(direction);
vx = vec.getIndex(0);
vy = 0;
vz = vec.getIndex(2);
breakReplaceDirectionBlock(ox+vx,oy,oz+vz,"sticky_piston",3,"up", false,accurateBlockPlacementEnabled,true,false,false);
if (!accurateBlockPlacementEnabled){sleep(100);}
breakReplaceDirectionBlock(ox,oy,oz,"obsidian",4,null, false,accurateBlockPlacementEnabled,true,false,false);
if (!accurateBlockPlacementEnabled){sleep(100);}
breakReplaceDirectionBlock(ox+2*vx,oy-1,oz+2*vz,"white_stained_glass",8,null,false,false, true,false,false);
if (!accurateBlockPlacementEnabled){sleep(100);}
placeTorch(ox+2*vx,oy,oz+2*vz,7,false);
}
fun processBreaking(ox,oy,oz,direction){
vec = getConvertedPistonVec(direction);
vx = vec.getIndex(0);
vy = 0;
vz = vec.getIndex(2);
swapToPickaxe();
player.attackBlock(ox+2*vx,oy,oz+2*vz,"up");
player.attackBlock(ox+vx,oy,oz+vz,"up");
placeTorch(ox+2*vx,oy,oz+2*vz,7,false);
breakReplaceDirectionBlock(ox+vx,oy,oz+vz,"sticky_piston",3,getReverse(direction), false,accurateBlockPlacementEnabled ,false,false,true);
}

fun makeHeadlessPistonAtHeadpos(X,Y,Z,direction){
if (!accurateBlockPlacementEnabled) {setFakeRequiredYawPitchDirection("piston", "up", 5);}
placeBreaking(X,Y,Z,direction);
sleep(200);
if (!accurateBlockPlacementEnabled) {setFakeRequiredYawPitchDirection("piston", direction, 5);}
processBreaking(X,Y,Z,direction);
sleep(50);}

pos = player.getLookingAtBlock();
makeHeadlessPistonAtHeadpos(pos.getBlockX(),pos.getBlockY(),pos.getBlockZ(),"north");
i = 0;

